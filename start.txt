# üöÄ How to Start the Agentic Microservices Project

Here's your complete step-by-step guide to get the project up and running:

## üìã Prerequisites

First, ensure you have these tools installed:

```powershell
# Check if you have the required tools
node --version          # Node.js (v16+)
npm --version           # npm package manager
docker --version        # Docker
kubectl version --client # Kubernetes CLI
gcloud version          # Google Cloud CLI
```

If any are missing, install them:
- **Node.js**: Download from [nodejs.org](https://nodejs.org/)
- **Docker**: Download from [docker.com](https://www.docker.com/)
- **kubectl**: `gcloud components install kubectl`
- **gcloud**: Download from [Google Cloud SDK](https://cloud.google.com/sdk)

## üèóÔ∏è Step 1: Project Setup

### Install Dependencies

```powershell
# Install main project dependencies
npm install

# Install development dependencies
npm install --save-dev

# Install TypeScript globally (if needed)
npm install -g typescript ts-node
```

### Environment Configuration

```powershell
# Copy environment template
copy .env.example .env

# Edit .env file with your configuration
# - Add your Google Cloud Project ID
# - Add Gemini AI API key
# - Configure other environment variables
```

## ‚öôÔ∏è Step 2: Local Development Setup

### Start Development Environment

```powershell
# Build the project
npm run build

# Start in development mode
npm run dev

# Or start individual services
npm run start:chatbot
npm run start:fraud-detection
npm run start:recommendation
```

### Run Tests

```powershell
# Run all tests
npm test

# Run specific test suites
npm run test:unit
npm run test:integration
npm run test:e2e
```

## ‚òÅÔ∏è Step 3: Cloud Deployment (Recommended)

### Configure Google Cloud

```powershell
# Authenticate with Google Cloud
gcloud auth login

# Set your project
gcloud config set project YOUR_PROJECT_ID

# Enable required APIs
gcloud services enable container.googleapis.com
gcloud services enable compute.googleapis.com
gcloud services enable monitoring.googleapis.com
```

### Deploy to GKE (Production-Ready)

```powershell
# Deploy everything to Google Kubernetes Engine
./scripts/deploy-gke.ps1 -Environment development -CreateCluster

# This will:
# - Create a GKE cluster
# - Build and push Docker images
# - Deploy all services
# - Set up networking and ingress
# - Configure monitoring
```

### Set Up Monitoring

```powershell
# Deploy monitoring stack (Prometheus, Grafana, Jaeger)
./scripts/setup-monitoring.ps1 -Environment development

# Access monitoring dashboards:
# - Grafana: Check output for URL and credentials
# - Prometheus: For metrics and alerts
# - Jaeger: For distributed tracing
```

## üê≥ Step 4: Local Docker Setup (Alternative)

If you prefer to run locally with Docker:

```powershell
# Build all Docker images
docker-compose build

# Start all services
docker-compose up -d

# Check service status
docker-compose ps

# View logs
docker-compose logs -f
```

## üß™ Step 5: Verify Everything Works

### Run Health Checks

```powershell
# Check all services are healthy
kubectl get pods -n agentic-dev  # For GKE deployment
# OR
docker-compose ps               # For local Docker

# Test API endpoints
curl http://localhost:8082/health  # Chatbot
curl http://localhost:8083/health  # Fraud Detection
curl http://localhost:8085/health  # Recommendation
```

### Run End-to-End Tests

```powershell
# Run comprehensive test suite
npm run test:e2e

# Run performance tests
npm run test:performance

# Run specific scenarios
npm run test:fraud-scenarios
npm run test:recommendation-accuracy
```

## üìä Step 6: Access Your System

### Service Endpoints

After deployment, you'll have access to:

- **Chatbot API**: `http://your-domain/api/chatbot`
- **Fraud Detection**: `http://your-domain/api/fraud`
- **Recommendations**: `http://your-domain/api/recommendations`
- **MCP Gateway**: `http://your-domain/api/mcp`
- **A2A Hub**: `http://your-domain/api/a2a`

### Monitoring Dashboards

- **Grafana**: System metrics and custom dashboards
- **Prometheus**: Raw metrics and alerting rules
- **Jaeger**: Distributed tracing and performance analysis

## üîß Step 7: Configuration

### Environment-Specific Configuration

```powershell
# Validate configuration
./scripts/validate-config.ts --environment development

# Deploy configuration updates
./scripts/config-deploy.ps1 -Environment development

# Check configuration consistency
./scripts/validate-config.ts --check-consistency
```

## üö® Troubleshooting

If you encounter issues:

1. **Check the logs**:
   ```powershell
   kubectl logs -f deployment/chatbot-agent -n agentic-dev
   ```

2. **Use the troubleshooting guide**:
   - Open `docs/runbooks/troubleshooting-guide.md`
   - Follow the step-by-step diagnostic procedures

3. **Check system health**:
   ```powershell
   kubectl get pods -n agentic-dev
   kubectl top nodes
   ```

## üìö Next Steps

Once everything is running:

1. **Explore the APIs** using the provided endpoints
2. **Monitor performance** through Grafana dashboards
3. **Review logs** for any issues or optimization opportunities
4. **Scale services** based on your load requirements
5. **Customize agents** for your specific use cases

## üéØ Quick Start Commands

For the fastest setup:

```powershell
# Complete setup in one go
npm install
./scripts/deploy-gke.ps1 -Environment development -CreateCluster
./scripts/setup-monitoring.ps1 -Environment development
npm run test:e2e
```

This will get your entire agentic microservices system up and running with monitoring and testing in about 15-20 minutes!

Need help with any specific step? Let me know! üöÄ